// === HTMLË¶ÅÁ¥†„ÅÆÂèñÂæó ===
const codeContainer = document.getElementById('code-container');
const questionEl = document.getElementById('question');
const answerInput = document.getElementById('answer-input');
const submitButton = document.getElementById('submit-button');
const nextButton = document.getElementById('next-button');
const resultEl = document.getElementById('result');
const confirmButton = document.getElementById('confirm-button');

// === „Ç≤„Éº„É†„ÅÆË®≠ÂÆö ===
const pythonCode = `# „Åì„ÅÆPython„Ç≥„Éº„Éâ„ÅÆÂÆüË°å„Çí„Éà„É¨„Éº„Çπ„Åó„Åæ„Åô
a = 15
b = 10

if a > b:
    result = a + b
else:
    result = a - b

c = result * 2`;

const quizSteps = [
    {
        type: 'control_flow',
        line: 5,
        questionText: "Âïè1: 5Ë°åÁõÆ„ÅÆifÊñá„ÅåË©ï‰æ°„Åï„Çå„ÅüÂæå„ÄÅÊ¨°„Å´ÂÆüË°å„Åï„Çå„Çã„ÅÆ„ÅØ‰ΩïË°åÁõÆ„Åß„Åô„ÅãÔºü (6„Åã8„ÅßÂõûÁ≠î)",
        correctAnswer: 6
    },
    {
        type: 'variable_value',
        line: 6,
        variable: 'result',
        questionText: "Âïè2: 6Ë°åÁõÆ„ÅåÂÆüË°å„Åï„Çå„ÅüÂæå„ÅÆÂ§âÊï∞ 'result' „ÅÆÂÄ§„ÅØÔºü"
    },
    {
        type: 'variable_value',
        line: 10,
        variable: 'c',
        questionText: "Âïè3: 10Ë°åÁõÆ„ÅåÂÆüË°å„Åï„Çå„ÅüÂæå„ÅÆÂ§âÊï∞ 'c' „ÅÆÂÄ§„ÅØÔºü"
    }
];

let currentStep = 0;
let pyodide = null;

// === Èñ¢Êï∞„ÅÆÂÆöÁæ© ===

function setupQuizStep(stepIndex) {
    const allLines = document.querySelectorAll('#code-container .line');
    allLines.forEach(line => line.classList.remove('highlight'));

    const step = quizSteps[stepIndex];
    questionEl.textContent = step.questionText;
    answerInput.value = '';
    resultEl.textContent = '';
    answerInput.disabled = false;
    submitButton.style.display = 'inline-block';
    nextButton.style.display = 'none';
}

function displayCodeWithLineNumbers(container, code) {
    container.innerHTML = '';
    const lines = code.split('\n');
    lines.forEach((lineText, index) => {
        const lineEl = document.createElement('div');
        lineEl.className = 'line';
        const numberEl = document.createElement('span');
        numberEl.className = 'line-number';
        numberEl.textContent = index + 1;
        const codeEl = document.createElement('span');
        codeEl.className = 'code-line';
        codeEl.textContent = lineText;
        lineEl.appendChild(numberEl);
        lineEl.appendChild(codeEl);
        container.appendChild(lineEl);
    });
}

async function getVariableValueAtLine(line, variable) {
    await pyodide.runPythonAsync(`
import sys
mods = list(sys.modules.keys())
for mod in mods:
    if not mod.startswith('_') and mod not in ['sys', 'js', 'pyodide', 'micropip']:
        del sys.modules[mod]
    `);
    const lines = pythonCode.split('\n');
    const codeToRun = lines.slice(0, line).join('\n');
    await pyodide.runPythonAsync(codeToRun);
    return pyodide.globals.get(variable);
}

function getExecutionPath() {
    return [2, 3, 5, 6, 10];
}

/**
 * ‚òÖ‚òÖ‚òÖ „Åì„ÅÆÈñ¢Êï∞„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü ‚òÖ‚òÖ‚òÖ
 * ÂÆüË°å„Éë„Çπ„Çí‰∏ÄË°å„Åö„Å§„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Åß„Éè„Ç§„É©„Ç§„Éà„Åô„ÇãÈñ¢Êï∞
 */
function highlightExecutionPath() {
    const allLines = document.querySelectorAll('#code-container .line');
    const path = getExecutionPath();
    let step = 0;
    let lastHighlightedLine = null; // Áõ¥Ââç„Å´„Éè„Ç§„É©„Ç§„Éà„Åó„ÅüË°å„ÇíË®òÊÜ∂„Åô„ÇãÂ§âÊï∞

    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰∏≠„ÅØ„Éú„Çø„É≥„ÇíÁÑ°ÂäπÂåñ
    confirmButton.disabled = true;

    const intervalId = setInterval(() => {
        // ÂâçÂõû„ÅÆ„Éè„Ç§„É©„Ç§„Éà„ÇíÊ∂à„Åô
        if (lastHighlightedLine) {
            lastHighlightedLine.classList.remove('highlight');
        }

        // ÂÆüË°å„Éë„Çπ„ÅÆÊúÄÂæå„Åæ„ÅßÂà∞ÈÅî„Åó„Åü„Çâ„ÄÅ„Ç§„É≥„Çø„Éº„Éê„É´„ÇíÂÅúÊ≠¢
        if (step >= path.length) {
            clearInterval(intervalId);
            confirmButton.disabled = false; // „Éú„Çø„É≥„ÇíÂÜçÂ∫¶ÊúâÂäπÂåñ
            return;
        }

        // ÁèæÂú®„ÅÆË°å„Çí„Éè„Ç§„É©„Ç§„Éà
        const currentLineIndex = path[step] - 1;
        const currentLineEl = allLines[currentLineIndex];
        if (currentLineEl) {
            currentLineEl.classList.add('highlight');
            lastHighlightedLine = currentLineEl; // „Éè„Ç§„É©„Ç§„Éà„Åó„ÅüË°å„ÇíË®òÊÜ∂
        }

        step++; // Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å∏
    }, 600); // 0.6Áßí„Åî„Å®„Å´ÂÆüË°å
}


// === „É°„Ç§„É≥„ÅÆÂá¶ÁêÜ ===

async function main() {
    displayCodeWithLineNumbers(codeContainer, pythonCode);
    pyodide = await loadPyodide();
    console.log('Pyodide„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Åæ„Åó„Åü„ÄÇ');

    setupQuizStep(currentStep);

    confirmButton.addEventListener('click', highlightExecutionPath);

    submitButton.addEventListener('click', async () => {
        const step = quizSteps[currentStep];
        const playerAnswer = parseInt(answerInput.value, 10);
        if (isNaN(playerAnswer)) {
            resultEl.textContent = 'Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            resultEl.style.color = 'orange';
            return;
        }
        let isCorrect = false;
        let correctAnswerValue;
        if (step.type === 'control_flow') {
            correctAnswerValue = step.correctAnswer;
            if (playerAnswer === correctAnswerValue) {
                isCorrect = true;
            }
        } else if (step.type === 'variable_value') {
            correctAnswerValue = await getVariableValueAtLine(step.line, step.variable);
            if (playerAnswer === correctAnswerValue) {
                isCorrect = true;
            }
        }
        if (isCorrect) {
            resultEl.textContent = `Ê≠£Ëß£ÔºÅ Á≠î„Åà„ÅØ ${correctAnswerValue} „Åß„Åô„ÄÇ`;
            resultEl.style.color = 'green';
            answerInput.disabled = true;
            submitButton.style.display = 'none';
            if (currentStep < quizSteps.length - 1) {
                nextButton.style.display = 'inline-block';
            } else {
                resultEl.textContent += ' üéâ„Ç≤„Éº„É†„ÇØ„É™„Ç¢ÔºÅ';
            }
        } else {
            resultEl.textContent = `‰∏çÊ≠£Ëß£...„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶ËÄÉ„Åà„Å¶„Åø„Çà„ÅÜÔºÅ`;
            resultEl.style.color = 'red';
        }
    });

    nextButton.addEventListener('click', () => {
        currentStep++;
        if (currentStep < quizSteps.length) {
            setupQuizStep(currentStep);
        }
    });
}

main();